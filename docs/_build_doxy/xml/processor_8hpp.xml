<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="processor_8hpp" kind="file" language="C++">
    <compoundname>processor.hpp</compoundname>
    <includes local="no">chrono</includes>
    <includes local="no">string</includes>
    <includes local="no">memory</includes>
    <includes local="no">functional</includes>
    <includes local="yes">opencv2/opencv.hpp</includes>
    <includes local="yes">cv_bridge/cv_bridge.h</includes>
    <includes local="yes">rclcpp/rclcpp.hpp</includes>
    <includes local="yes">std_msgs/msg/string.hpp</includes>
    <includes local="yes">sensor_msgs/msg/image.hpp</includes>
    <includes local="yes">sensor_msgs/msg/region_of_interest.hpp</includes>
    <includes refid="epd__container_8hpp" local="yes">epd_utils_lib/epd_container.hpp</includes>
    <includes local="yes">epd_msgs/msg/epd_image_classification.hpp</includes>
    <includes local="yes">epd_msgs/msg/epd_object_detection.hpp</includes>
    <includes refid="message__utils_8hpp" local="yes">epd_utils_lib/message_utils.hpp</includes>
    <incdepgraph>
      <node id="37">
        <label>functional</label>
      </node>
      <node id="38">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="35">
        <label>string</label>
      </node>
      <node id="39">
        <label>cv_bridge/cv_bridge.h</label>
      </node>
      <node id="40">
        <label>rclcpp/rclcpp.hpp</label>
      </node>
      <node id="33">
        <label>/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/epd_utils_lib/processor.hpp</label>
        <link refid="processor_8hpp"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>sensor_msgs/msg/image.hpp</label>
      </node>
      <node id="44">
        <label>epd_msgs/msg/epd_image_classification.hpp</label>
      </node>
      <node id="34">
        <label>chrono</label>
      </node>
      <node id="43">
        <label>sensor_msgs/msg/region_of_interest.hpp</label>
      </node>
      <node id="41">
        <label>std_msgs/msg/string.hpp</label>
      </node>
      <node id="45">
        <label>epd_msgs/msg/epd_object_detection.hpp</label>
      </node>
      <node id="36">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classProcessor" prot="public">Processor</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2020<sp/>ROS-Industrial<sp/>Consortium<sp/>Asia<sp/>Pacific</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EPD_UTILS_LIB__PROCESSOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EPD_UTILS_LIB__PROCESSOR_HPP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OpenCV<sp/>LIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;opencv2/opencv.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ROS2<sp/>LIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;cv_bridge/cv_bridge.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rclcpp/rclcpp.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;std_msgs/msg/string.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sensor_msgs/msg/image.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sensor_msgs/msg/region_of_interest.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EPD_UTILS<sp/>LIB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epd_utils_lib/epd_container.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epd_msgs/msg/epd_image_classification.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epd_msgs/msg/epd_object_detection.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;epd_utils_lib/message_utils.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classProcessor" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classProcessor" kindref="compound">Processor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>rclcpp::Node</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classProcessor_1a65c205fad80987ed72216978e882cb80" kindref="member">Processor</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr<sp/>status_sub;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>rclcpp::Subscription&lt;sensor_msgs::msg::Image&gt;::SharedPtr<sp/>image_sub;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>rclcpp::Publisher&lt;sensor_msgs::msg::Image&gt;::SharedPtr<sp/>visual_pub;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>rclcpp::Publisher&lt;epd_msgs::msg::EPDImageClassification&gt;::SharedPtr<sp/>p1_pub;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>rclcpp::Publisher&lt;epd_msgs::msg::EPDObjectDetection&gt;::SharedPtr<sp/>p2_pub;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>rclcpp::Publisher&lt;epd_msgs::msg::EPDObjectDetection&gt;::SharedPtr<sp/>p3_pub;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classEPD_1_1EPDContainer" kindref="compound">EPD::EPDContainer</ref><sp/>ortAgent_;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>topic_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::msg::Image::SharedPtr<sp/>msg)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>state_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::msg::String::SharedPtr<sp/>msg)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="classProcessor_1a65c205fad80987ed72216978e882cb80" kindref="member">Processor::Processor</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">:<sp/>Node(</highlight><highlight class="stringliteral">&quot;processer&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creating<sp/>subscriber</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>image_sub<sp/>=<sp/>this-&gt;create_subscription&lt;sensor_msgs::msg::Image&gt;(</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/processor/image_input&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>10,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(&amp;Processor::topic_callback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>status_sub<sp/>=<sp/>this-&gt;create_subscription&lt;std_msgs::msg::String&gt;(</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/processor/state_input&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>10,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bind(&amp;Processor::state_callback,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>std::placeholders::_1));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creating<sp/>publisher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>visual_pub<sp/>=<sp/>this-&gt;create_publisher&lt;sensor_msgs::msg::Image&gt;(</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/processor/output&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>10);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>p1_pub<sp/>=<sp/>this-&gt;create_publisher&lt;epd_msgs::msg::EPDImageClassification&gt;(</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/processor/epd_p1_output&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>10);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>p2_pub<sp/>=<sp/>this-&gt;create_publisher&lt;epd_msgs::msg::EPDObjectDetection&gt;(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/processor/epd_p2_output&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>10);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>p3_pub<sp/>=<sp/>this-&gt;create_publisher&lt;epd_msgs::msg::EPDObjectDetection&gt;(</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/processor/epd_p3_output&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>10);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Processor::state_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std_msgs::msg::String::SharedPtr<sp/>msg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="114"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::string<sp/>requested_state<sp/>=<sp/>msg-&gt;data.c_str();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(requested_state.compare(</highlight><highlight class="stringliteral">&quot;shutdown&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>rclcpp::shutdown();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_WARN(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>state<sp/>requested.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Processor::topic_callback(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sensor_msgs::msg::Image::SharedPtr<sp/>msg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="125"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/>&quot;Image<sp/>received&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>if<sp/>input<sp/>image<sp/>is<sp/>empty<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/>If<sp/>empty,<sp/>discard<sp/>image<sp/>and<sp/>don&apos;t<sp/>process.</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/>Otherwise,<sp/>proceed<sp/>with<sp/>processing.</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg-&gt;height<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>RCLCPP_WARN(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>image<sp/>empty.<sp/>Discarding.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Convert<sp/>ROS<sp/>Image<sp/>message<sp/>to<sp/>cv::Mat<sp/>for<sp/>processing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;cv_bridge::CvImage&gt;<sp/>imgptr<sp/>=<sp/>cv_bridge::toCvCopy(msg,<sp/></highlight><highlight class="stringliteral">&quot;bgr8&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>img<sp/>=<sp/>imgptr-&gt;image;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a4c118d7f38da1c02033955bf73596cb0" kindref="member">isInit</ref>())<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a371ffc46b938043ee4db5231bacb31d1" kindref="member">setFrameDimension</ref>(img.cols,<sp/>img.rows);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a994f93ddc75986a817bec89b59a7c779" kindref="member">initORTSessionHandler</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a36d54211b5ded9a99dff338ca12dc590" kindref="member">setInitBoolean</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(cardboardcode)<sp/>Implement<sp/>auto<sp/>reinitialization<sp/>of<sp/>Ort<sp/>Session.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>Check<sp/>if<sp/>height<sp/>and<sp/>width<sp/>has<sp/>changed<sp/>or<sp/>not.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>either<sp/>dim<sp/>changed,<sp/>throw<sp/>runtime<sp/>error.</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>Otherwise,<sp/>proceed.</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a122ce64ccbae3439b9f3c457ec5c73a5" kindref="member">getWidth</ref>()<sp/>!=<sp/>img.cols<sp/>&amp;&amp;<sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a545f016afc427032ddd4d271c8ff6cb7" kindref="member">getHeight</ref>()<sp/>!=<sp/>img.rows)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Input<sp/>camera<sp/>changed.<sp/>Please<sp/>restart.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>std::chrono::high_resolution_clock::time_point<sp/>begin<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>cv::Mat<sp/>resultImg;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a8566251df1b00a088fcb00660cdb29cf" kindref="member">precision_level</ref>)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epd_msgs::msg::EPDImageClassification<sp/>output_msg;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.object_names<sp/>=<sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a18b26c6078c688eec26e964884b14257" kindref="member">p1_ort_session</ref>-&gt;<ref refid="classOrt_1_1P1OrtBase_1ade038de1967c2ac01af7ab617dbcea1b" kindref="member">infer</ref>(img);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(cardboardcode)<sp/>Populate<sp/>header<sp/>information<sp/>with<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>output_msg.header<sp/>=<sp/>std_msgs::msg::Header();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1_pub-&gt;publish(output_msg);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ortAgent_.<ref refid="classEPD_1_1EPDContainer_1af19c19ff8de6713b4cefbb94f47d4bd2" kindref="member">isVisualize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultImg<sp/>=<sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1add6c5c348b2aa94dd9dae5372bab16dc" kindref="member">p2_ort_session</ref>-&gt;<ref refid="classOrt_1_1P2OrtBase_1acf9dff96064c44f8a28065374418e589" kindref="member">infer_visualize</ref>(img);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::msg::Image::SharedPtr<sp/>output_msg<sp/>=</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv_bridge::CvImage(std_msgs::msg::Header(),<sp/></highlight><highlight class="stringliteral">&quot;bgr8&quot;</highlight><highlight class="normal">,<sp/>resultImg).toImageMsg();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visual_pub-&gt;publish(*output_msg);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEPD_1_1EPDObjectDetection" kindref="compound">EPD::EPDObjectDetection</ref><sp/>result<sp/>=<sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1add6c5c348b2aa94dd9dae5372bab16dc" kindref="member">p2_ort_session</ref>-&gt;<ref refid="classOrt_1_1P2OrtBase_1a42373d699b170d9be763416554072c3d" kindref="member">infer_action</ref>(img);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epd_msgs::msg::EPDObjectDetection<sp/>output_msg;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a80f2c8e86454b9e6009f26a87433b6da" kindref="member">data_size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.class_indices.push_back(result.<ref refid="classEPD_1_1EPDObjectDetection_1afcb68e9efe2855b5c58b87f7b26a4129" kindref="member">classIndices</ref>[i]);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.<ref refid="classEPD_1_1EPDObjectDetection_1a2b12266233e2d87f61a730b692a46785" kindref="member">scores</ref>.push_back(result.<ref refid="classEPD_1_1EPDObjectDetection_1a2b12266233e2d87f61a730b692a46785" kindref="member">scores</ref>[i]);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::msg::RegionOfInterest<sp/>roi;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.x_offset<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][0];</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.y_offset<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][1];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.width<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][2]<sp/>-<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][0];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.height<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][3]<sp/>-<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][1];</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.do_rectify<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.bboxes.push_back(roi);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p2_pub-&gt;publish(output_msg);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ortAgent_.<ref refid="classEPD_1_1EPDContainer_1af19c19ff8de6713b4cefbb94f47d4bd2" kindref="member">isVisualize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resultImg<sp/>=<sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a812461a71889963abc810167cc2a92b5" kindref="member">p3_ort_session</ref>-&gt;<ref refid="classOrt_1_1P3OrtBase_1ac7dcd88c76e54e2a272fb9284bb789c4" kindref="member">infer_visualize</ref>(img);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::msg::Image::SharedPtr<sp/>output_msg<sp/>=</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv_bridge::CvImage(std_msgs::msg::Header(),<sp/></highlight><highlight class="stringliteral">&quot;bgr8&quot;</highlight><highlight class="normal">,<sp/>resultImg).toImageMsg();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visual_pub-&gt;publish(*output_msg);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classEPD_1_1EPDObjectDetection" kindref="compound">EPD::EPDObjectDetection</ref><sp/>result<sp/>=<sp/>ortAgent_.<ref refid="classEPD_1_1EPDContainer_1a812461a71889963abc810167cc2a92b5" kindref="member">p3_ort_session</ref>-&gt;<ref refid="classOrt_1_1P3OrtBase_1ac79040877c158d910e1bb68a072aef4a" kindref="member">infer_action</ref>(img);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>epd_msgs::msg::EPDObjectDetection<sp/>output_msg;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a80f2c8e86454b9e6009f26a87433b6da" kindref="member">data_size</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.class_indices.push_back(result.<ref refid="classEPD_1_1EPDObjectDetection_1afcb68e9efe2855b5c58b87f7b26a4129" kindref="member">classIndices</ref>[i]);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.<ref refid="classEPD_1_1EPDObjectDetection_1a2b12266233e2d87f61a730b692a46785" kindref="member">scores</ref>.push_back(result.<ref refid="classEPD_1_1EPDObjectDetection_1a2b12266233e2d87f61a730b692a46785" kindref="member">scores</ref>[i]);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::msg::RegionOfInterest<sp/>roi;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.x_offset<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][0];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.y_offset<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][1];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.width<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][2]<sp/>-<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][0];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.height<sp/>=<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][3]<sp/>-<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1a2ae7f229afbbeba810bae1e9a69c38b7" kindref="member">bboxes</ref>[i][1];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>roi.do_rectify<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.bboxes.push_back(roi);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sensor_msgs::msg::Image::SharedPtr<sp/>mask<sp/>=</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv_bridge::CvImage(std_msgs::msg::Header(),<sp/></highlight><highlight class="stringliteral">&quot;32FC1&quot;</highlight><highlight class="normal">,<sp/>result.<ref refid="classEPD_1_1EPDObjectDetection_1afdb9138c1e27dfb472d2eb271dce59eb" kindref="member">masks</ref>[i]).toImageMsg();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_msg.masks.push_back(*mask);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p3_pub-&gt;publish(output_msg);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>std::chrono::high_resolution_clock::time_point<sp/>end<sp/>=<sp/>std::chrono::high_resolution_clock::now();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>elapsedTime<sp/>=<sp/>std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(end<sp/>-<sp/>begin);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>RCLCPP_INFO(this-&gt;get_logger(),<sp/></highlight><highlight class="stringliteral">&quot;[-FPS-]=<sp/>%f\n&quot;</highlight><highlight class="normal">,<sp/>1000.0<sp/>/<sp/>elapsedTime.count());</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>EPD_UTILS_LIB__PROCESSOR_HPP_</highlight></codeline>
    </programlisting>
    <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/epd_utils_lib/processor.hpp"/>
  </compounddef>
</doxygen>
