<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classOrt_1_1OrtBase" kind="class" language="C++" prot="public">
    <compoundname>Ort::OrtBase</compoundname>
    <derivedcompoundref refid="classOrt_1_1P1OrtBase" prot="public" virt="non-virtual">Ort::P1OrtBase</derivedcompoundref>
    <derivedcompoundref refid="classOrt_1_1P2OrtBase" prot="public" virt="non-virtual">Ort::P2OrtBase</derivedcompoundref>
    <derivedcompoundref refid="classOrt_1_1P3OrtBase" prot="public" virt="non-virtual">Ort::P3OrtBase</derivedcompoundref>
    <includes local="no">ort_base.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classOrt_1_1OrtBase_1adf2da264432541eb7cdf1122f742e9c4" prot="public" static="no">
        <type>std::pair&lt; float *, std::vector&lt; std::int64_t &gt; &gt;</type>
        <definition>using Ort::OrtBase::DataOutputType =  std::pair&lt;float *, std::vector&lt;std::int64_t&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>DataOutputType</name>
        <briefdescription>
<para>A convienence datatype to store output inference result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" line="47" column="1" bodyfile="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOrt_1_1OrtBase_1a7ba0b5c38421e3d43f0fd2d87b61b528" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; OrtBaseImpl &gt;</type>
        <definition>std::unique_ptr&lt;OrtBaseImpl&gt; Ort::OrtBase::base_impl_</definition>
        <argsstring></argsstring>
        <name>base_impl_</name>
        <briefdescription>
<para>A pointer to the OrtBaseImpl. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" line="60" column="1" bodyfile="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOrt_1_1OrtBase_1ad81b15848098d8137f8816fb1a491dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ort::OrtBase::OrtBase</definition>
        <argsstring>(const std::string &amp;modelPath, const boost::optional&lt; size_t &gt; &amp;gpuIdx=boost::none, const boost::optional&lt; std::vector&lt; std::vector&lt; std::int64_t &gt;&gt;&gt; &amp;inputShapes=boost::none)</argsstring>
        <name>OrtBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>modelPath</declname>
        </param>
        <param>
          <type>const boost::optional&lt; size_t &gt; &amp;</type>
          <declname>gpuIdx</declname>
          <defval>boost::none</defval>
        </param>
        <param>
          <type>const boost::optional&lt; std::vector&lt; std::vector&lt; std::int64_t &gt;&gt;&gt; &amp;</type>
          <declname>inputShapes</declname>
          <defval>boost::none</defval>
        </param>
        <briefdescription>
<para>A Constructor function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classOrt_1_1OrtBase_1ab311e3e35bd05728ec48f5a42947d172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Ort::OrtBase::~OrtBase</definition>
        <argsstring>()</argsstring>
        <name>~OrtBase</name>
        <briefdescription>
<para>A Destructor function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classOrt_1_1OrtBase_1a3fc8f611e4392faec49fea733b23ccb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classOrt_1_1OrtBase_1adf2da264432541eb7cdf1122f742e9c4" kindref="member">DataOutputType</ref> &gt;</type>
        <definition>std::vector&lt;DataOutputType&gt; Ort::OrtBase::operator()</definition>
        <argsstring>(const std::vector&lt; float *&gt; &amp;inputImgData)</argsstring>
        <name>operator()</name>
        <param>
          <type>const std::vector&lt; float *&gt; &amp;</type>
          <declname>inputImgData</declname>
        </param>
        <briefdescription>
<para>A Mutator operator function that conducts inference with preprocessed input image data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classOrt_1_1OrtBase_1a9d54c41654fed1d5bee18b089d5a6edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Ort::OrtBase::getNumOutputs</definition>
        <argsstring>(void)</argsstring>
        <name>getNumOutputs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>A Getter function that gets the number of outputs which is used to determine the level of precision in EPDContainer class object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" line="54" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An ONNXRuntime (Ort) Base class object. This is the base class for <ref refid="classOrt_1_1P1OrtBase" kindref="compound">P1OrtBase</ref>, <ref refid="classOrt_1_1P2OrtBase" kindref="compound">P2OrtBase</ref> and <ref refid="classOrt_1_1P3OrtBase" kindref="compound">P3OrtBase</ref>. It serves an auxillary class object to directly interface with the ONNXRuntime CPP API to instantiate an Ort session to run as an inference engine. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="24">
        <label>Ort::OrtBase</label>
        <link refid="classOrt_1_1OrtBase"/>
      </node>
      <node id="26">
        <label>Ort::P2OrtBase</label>
        <link refid="classOrt_1_1P2OrtBase"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="27">
        <label>Ort::P3OrtBase</label>
        <link refid="classOrt_1_1P3OrtBase"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>Ort::P1OrtBase</label>
        <link refid="classOrt_1_1P1OrtBase"/>
        <childnode refid="24" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" line="36" column="1" bodyfile="/home/rosi/Desktop/rect_ws/src/epd/easy_perception_deployment/include/ort_cpp_lib/ort_base.hpp" bodystart="35" bodyend="61"/>
    <listofallmembers>
      <member refid="classOrt_1_1OrtBase_1a7ba0b5c38421e3d43f0fd2d87b61b528" prot="private" virt="non-virtual"><scope>Ort::OrtBase</scope><name>base_impl_</name></member>
      <member refid="classOrt_1_1OrtBase_1adf2da264432541eb7cdf1122f742e9c4" prot="public" virt="non-virtual"><scope>Ort::OrtBase</scope><name>DataOutputType</name></member>
      <member refid="classOrt_1_1OrtBase_1a9d54c41654fed1d5bee18b089d5a6edd" prot="public" virt="non-virtual"><scope>Ort::OrtBase</scope><name>getNumOutputs</name></member>
      <member refid="classOrt_1_1OrtBase_1a3fc8f611e4392faec49fea733b23ccb5" prot="public" virt="non-virtual"><scope>Ort::OrtBase</scope><name>operator()</name></member>
      <member refid="classOrt_1_1OrtBase_1ad81b15848098d8137f8816fb1a491dab" prot="public" virt="non-virtual"><scope>Ort::OrtBase</scope><name>OrtBase</name></member>
      <member refid="classOrt_1_1OrtBase_1ab311e3e35bd05728ec48f5a42947d172" prot="public" virt="non-virtual"><scope>Ort::OrtBase</scope><name>~OrtBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
